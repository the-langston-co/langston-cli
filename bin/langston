#!/bin/zsh
set -e
CURRENT_DIR=$(dirname $0)
SCRIPTS_DIR="$CURRENT_DIR/scripts"
RESOURCES_DIR="$CURRENT_DIR/../resources"

cd "$CURRENT_DIR"
#echo "pwd: $(pwd)"
#echo "CURRENT_DIR: ${CURRENT_DIR}"
#echo "SCRIPTS_DIR: ${SCRIPTS_DIR}"
#echo "RESOURCES_DIR: ${RESOURCES_DIR}"
#echo

print_banner() {
  echo "$(cd "$RESOURCES_DIR" ; cat banner.txt)"
}


COMMAND=$1
PROGRAM=$2

#### Terminal COLORS #######
# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

VERSION="$(cat $HOME/langston-cli/resources/VERSION.txt)"

if [[ $COMMAND == 'auth-proxy' || $COMMAND == 'db' ]]; then
  cd scripts/auth-proxy
  if [[ $PROGRAM == 'install' ]]; then
    print_banner
    echo
    ./install.sh
  elif [[ $PROGRAM == 'start' ]]; then
    print_banner
    echo
    if ! command -v cloud-sql-proxy &> /dev/null
    then
        echo "cloud-sql-proxy has not been installed yet. Installing it now...."
        ./install.sh
    fi
    ./start.sh "$3"
  elif [[ $PROGRAM == 'start-stage' ]]; then
    print_banner
    echo
    ./start.sh stage
  elif [[ $PROGRAM == 'stop' ]]; then
      print_banner
      echo
      ./stop.sh "$3"
  elif [[ $PROGRAM == 'check' || $PROGRAM == 'status' ]]; then
      print_banner
      echo
      if [[ $3 == 'all' ]]; then
        ./check.sh stage
        echo
        ./check.sh prod
        echo
        ./check.sh prod-replica
      else
        ./check.sh "$3"
      fi
  elif [[ $PROGRAM == 'help' ]]; then
    print_banner
    echo
    cat "$SCRIPTS_DIR/auth-proxy/HELP.txt"
  else
    echo "‚ùì auth-proxy command \"$PROGRAM\" not recognized."
    echo
    cat "$SCRIPTS_DIR/auth-proxy/HELP.txt"
  fi
elif [[ $COMMAND == 'setup' || $COMMAND == 'install' ]]; then
  "$CURRENT_DIR"/scripts/configure/install.sh
  echo "${Green}"
  echo "*******************************************"
  echo "üéâ Langston CLI ${VERSION} Installed successfully! üéâ"
  echo "*******************************************"
  echo "${Color_Off}"
  echo
  cat "$RESOURCES_DIR/COMMANDS.txt"
elif [[ $COMMAND == 'update' ]]; then
  "$SCRIPTS_DIR/configure/update-check.sh"
elif [[ $COMMAND == 'download' ]]; then
  "$SCRIPTS_DIR/configure/download.sh"
elif [[ $COMMAND == 'auth' ]]; then
  "$SCRIPTS_DIR/configure/auth.sh" $PROGRAM
elif [[ $COMMAND == 'fetch' ]]; then
  echo "Using Fetch..."
  if [[ $PROGRAM == 'install' || $PROGRAM == 'update' || $PROGRAM == 'download' ]]; then
    echo "Getting latest version fo fetch"
    "$SCRIPTS_DIR/fetch/download-fetch.sh"
  fi
elif [[ $COMMAND == '' || $COMMAND == 'help' || $COMMAND == '--help' || $COMMAND == '-h' ]]; then
  print_banner
  cat "$RESOURCES_DIR/COMMANDS.txt"
elif [[ $COMMAND == 'version' || $COMMAND == 'v' || $COMMAND == '-v' || $COMMAND == '--version' ]]; then
  echo -e "$(cat "$CURRENT_DIR"/../resources/VERSION.txt)"

else
  print_banner
  echo
  echo -e "${Red}Command \"$COMMAND\" not recognized.${Color_Off}"
  echo
  echo -e "${Cyan}$(cat "$RESOURCES_DIR/COMMANDS.txt")${Color_Off}"
fi
